version: 2
jobs:
  testtools:
    docker:
      - image: circleci/node:10.10

    steps:
      - checkout

      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "tools/nf-gen-ts/package-lock.json" }}
          - v1-dependencies-

      - run:
          command: npm ci
          working_directory: tools/nf-gen-ts/

      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "tools/nf-gen-ts/package-lock.json" }}

      # run "tests"
      - run:
          command: npm run check
          working_directory: tools/nf-gen-ts/

  testjsts:
    docker:
      - image: circleci/node:10.10

    steps:
      - checkout

      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "js/package-lock.json" }}
          - v1-dependencies-

      - run:
          command: npm ci
          working_directory: js/

      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "js/package-lock.json" }}

      - run:
          command: npm run test
          working_directory: js/

  testjava:
    docker:
      - image: circleci/openjdk:8-jdk

    steps:
      - checkout

      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "java/pom.xml" }}
          - v1-dependencies-

      - run:
          command: mvn dependency:go-offline
          working_directory: java/

      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "java/pom.xml" }}

      - run:
          command: mvn clean verify -B -e
          working_directory: java/

  testswift:
    macos:
      xcode: "10.1.0"

    steps:
      - checkout

      - run:
          command: |
            # rake xcodeproj
            swift test
          working_directory: swift/

  testcpp:
    docker:
      - image: ubuntu:bionic

    environment:
      CC: clang-3.9
      CXX: clang++-3.9

    steps:
      - checkout

      - run: |
          apt-get update && apt-get install -y build-essential ninja-build clang-3.9 libc++-dev libc++abi-dev libcurl4-openssl-dev wget git cmake

      - run:
          name: "Pull Submodules"
          command: git submodule update --init --recursive

      - run: |
          mkdir ninja-build

      - run:
          command: cmake -GNinja ../
          working_directory: ninja-build/

      - run:
          command: |
            echo $CC
            echo $CCX
            ninja
            ninja test
          working_directory: ninja-build/

  testpython:
    docker:
      - image: circleci/python:3.6.4

    steps:
      - checkout

      - run: sudo chown -R circleci:circleci /usr/local/bin
      - run: sudo chown -R circleci:circleci /usr/local/lib/python3.6/site-packages

      - run:
          command: python setup.py install
          working_directory: python/

      - run:
          command: python -m unittest discover -v
          working_directory: python/


  deploy-java:
    docker:
      - image: circleci/openjdk:8-jdk

    steps:
      - checkout
      # https://www.phillip-kruger.com/post/continuous_integration_to_maven_central/
      - run: echo $GPG_SECRET_KEYS | base64 --decode | $GPG_EXECUTABLE --import
      - run: echo $GPG_OWNERTRUST | base64 --decode | $GPG_EXECUTABLE --import-ownertrust
      - run: sudo apt-get install jq -y
      - run: echo 'export current_release="$(jq -r .version smart-player-contract.json)"' >> $BASH_ENV
      - run: cd java && mvn versions:set -DnewVersion="${current_release}-SNAPSHOT" -DgenerateBackupPoms=false
      - run: cd java && mvn -B -Prelease release:clean release:prepare -DpushChanges=false -DreleaseVersion="${current_release}" -DdevelopmentVersion=0-SNAPSHOT
      - run: cd java && mvn -B -Prelease release:perform


  deploy-js-ts:
    docker:
      - image: circleci/node:10.10

    steps:
      - checkout
      - run: sudo apt-get install jq -y
      - run: echo 'export current_release="$(jq -r .version smart-player-contract.json)"' >> $BASH_ENV
      - run: cd js && echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > .npmrc
      - run: cd js && npm version --no-git-tag-version -f "$current_release"
      - run: cd js && npm ci
      - run: cd js && npm publish

  deploy-python:
    docker:
      - image: circleci/python:3.6.4

    steps:
      - checkout
      - run: sudo chown -R circleci:circleci /usr/local/bin
      - run: sudo chown -R circleci:circleci /usr/local/lib/python3.6/site-packages
      - run: pip install twine
      - run:
          name: init .pypirc
          command: |
            echo -e "[pypi]" >> ~/.pypirc
            echo -e "username = $PYPI_USERNAME" >> ~/.pypirc
            echo -e "password = $PYPI_PASSWORD" >> ~/.pypirc
      - run: cd python && python setup.py sdist
      - run: cd python && python setup.py bdist_wheel
      - run: cd python && twine upload dist/*


workflows:
  version: 2
  build:
    jobs:
      - testtools
      - testjsts
      - testjava
      - testswift
      - testcpp
      - testpython

  tagged-deploy:
    jobs:
      - deploy-java:
          requires:
            - hold
          filters:
            tags:
              only: /^\d+\.\d+\.\d+/
            branches:
              ignore: /.*/
      - deploy-js-ts:
          requires:
            - hold
          filters:
            tags:
              only: /^\d+\.\d+\.\d+/
            branches:
              ignore: /.*/
      - deploy-python:
          requires:
            - hold
          filters:
            tags:
              only: /^\d+\.\d+\.\d+/
            branches:
              ignore: /.*/
      - hold:
          type: approval
          filters:
            tags:
              only: /^\d+\.\d+\.\d+/
            branches:
              ignore: /.*/
